/**
 * You’ve seen the console.log() function used throughout this
 * book: in web browsers, it prints a string in the “Console” tab of the
 * browser’s developer tools pane, which can be very helpful when
 * debugging. In Node, console.log() is a general-purpose output
 * function and prints its arguments to the process’s stdout stream, where
 * it typically appears to the user in a terminal window as program
 * output.
 */

// The Console API defines the following functions:
/**
 * console.log(): This is the most well-known of the console functions. 
 * It converts its arguments to strings and outputs them to the console. 
 * It includes spaces between the arguments and starts a new line after 
 * outputting all arguments.
 * 
 * console.debug(), console.info(), console.warn(), console.error(): 
 * These functions are almost identical to console.log(). In Node, 
 * console.error() sends its output to the stderr stream rather than the 
 * stdout stream, but the other functions are aliases of console.log(). 
 * In browsers, output messages generated by each of these functions may 
 * be prefixed by an icon that indicates its level or severity, and the 
 * developer console may also allow developers to filter console messages 
 * by level. 
 * 
 * console.assert(): If the first argument is truthy (i.e., if the 
 * assertion passes), then this function does nothing. But if the first 
 * argument is false or another falsy value, then the remaining arguments 
 * are printed as if they had been passed to console.error() with an 
 * “Assertion failed” prefix. Note that, unlike typical assert() 
 * functions, console.assert() does not throw an exception when an 
 * assertion fails.
 * 
 * console.clear(): This function clears the console when that is 
 * possible. This works in browsers and in Node when Node is displaying 
 * its output to a terminal. If Node’s output has been redirected to a 
 * file or a pipe, however, then calling this function has no effect.
 *
 * console.table(): This function is a remarkably powerful but 
 * little-known feature for producing tabular output, and it is 
 * particularly useful in Node programs that need to produce output that 
 * summarizes data. console.table() attempts to display its argument in 
 * tabular form (although, if it can’t do that, it displays it using 
 * regular console.log() formatting). This works best when the argument 
 * is a relatively short array of objects, and all of the objects in the 
 * array have the same (relatively small) set of properties. In this 
 * case, each object in the array is formatted as a row of the table, and 
 * each property is a column of the table. You can also pass an array of 
 * property names as an optional second argument to specify the desired 
 * set of columns. If you pass an object instead of an array of objects, 
 * then the output will be a table with one column for property names and 
 * one column for property values. Or, if those property values are 
 * themselves objects, their property names will become columns in the 
 * table.
 * 
 * console.trace(): This function logs its arguments like console.log() 
 * does, and, in addition, follows its output with a stack trace. In 
 * Node, the output goes to stderr instead of stdout.
 * 
 * console.count(): This function takes a string argument and logs that 
 * string, followed by the number of times it has been called with that 
 * string. This can be useful when debugging an event handler, for 
 * example, if you need to keep track of how many times the event handler 
 * has been triggered.
 * 
 * console.countReset(): This function takes a string argument and resets 
 * the counter for that string. 
 * 
 * console.group(): This function prints its arguments to the console as 
 * if they had been passed to console.log(), then sets the internal state 
 * of the console so that all subsequent console messages (until the next 
 * console.groupEnd() call) will be indented relative to the message that 
 * it just printed. This allows a group of related messages to be 
 * visually grouped with indentation. In web browsers, the developer 
 * console typically allows grouped messages to be collapsed and expanded 
 * as a group. The arguments to console.group() are typically used to 
 * provide an explanatory name for the group.
 * 
 * console.groupCollapsed(): This function works like console.group() 
 * except that in web browsers, the group will be “collapsed” by default 
 * and the messages it contains will be hidden unless the user clicks to 
 * expand the group. In Node, this function is a synonym for 
 * console.group().
 * 
 * console.groupEnd(): This function takes no arguments. It produces no 
 * output of its own but ends the indentation and grouping caused by the 
 * most recent call to console.group() or console.groupCollapsed().
 * 
 * console.time(): This function takes a single string argument, makes a 
 * note of the time it was called with that string, and produces no 
 * output.
 * 
 * console.timeLog(): This function takes a string as its first argument. 
 * If that string had previously been passed to console.time(), then it 
 * prints that string followed by the elapsed time since the 
 * console.time() call. If there are any additional arguments to console.
 * timeLog(), they are printed as if they had been passed to 
 * console.log().
 * 
 * console.timeEnd(): This function takes a single string argument. If 
 * that argument had previously been passed to console.time(), then it 
 * prints that argument and the elapsed time. After calling console.
 * timeEnd(), it is no longer legal to call console.timeLog() without 
 * first calling console.time() again.
 */

// Formatted Output with Console

/**
 * Console functions that print their arguments like console.log() have a 
 * little-known feature: if the first argument is a string that includes 
 * %s, %i, %d, %f, %o, %O, or %c, then this first argument is treated as 
 * format string, and the values of subsequent arguments are substituted 
 * into the string in place of the two-character % sequences.
 */

// The meanings of the sequences are as follows:

/**
 * %s: The argument is converted to a string.
 * 
 * %i and %d: The argument is converted to a number and then truncated to 
 * an integer.
 * 
 * %f: The argument is converted to a number
 * 
 * %o and %O: The argument is treated as an object, and property names and
 * values are displayed. (In web browsers, this display is typically 
 * interactive, and users can expand and collapse properties to explore a 
 * nested data structure.) %o and %O both display object details. The 
 * uppercase variant uses an implementation-dependent output format that 
 * is judged to be most useful for software developers.
 * 
 * %c: In web browsers, the argument is interpreted as a string of CSS 
 * styles and used to style any text that follows (until the next %c 
 * sequence or the end of the string). In Node, the %c sequence and its 
 * corresponding argument are simply ignored.
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */